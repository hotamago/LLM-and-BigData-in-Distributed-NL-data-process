{
    "id": "0caae171-d680-4c9b-9d4f-a0233563edb9",
    "data": {
        "nodes": [
            {
                "id": "TextInput-Kf7KW",
                "type": "genericNode",
                "position": {
                    "x": -338.26852453127543,
                    "y": 207.385313234112
                },
                "data": {
                    "node": {
                        "template": {
                            "_type": "Component",
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "input_value": {
                                "tool_mode": false,
                                "trace_as_input": true,
                                "multiline": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "input_value",
                                "value": "{\n  \"columns_information\": \"datetime: Date and time of the content, format: YYYY-MM-DD HH:MM:SS\\ncontent: Full text content scraped from the website, type: string\\nsummary: Summarized content focusing on crypto influence, type: string\\ncrypto_influence_score: Numerical score (0-10) representing the content's influence on crypto, type: float\\ninfluence_description: Explanation of how the content influences crypto, type: string\",\n  \"given_data\": \"Press Releases\\nContact us\\nADVERTISE\\nBITCOIN\\nALTCOINS\\nTECH\\nINDUSTRY\\nHOW TO\\nEVENTS\\nPLAY GAMES\\nCASINOS\\nSTAKE: 200% BONUS\\nBreaking News: Craig Wright Sentenced To 1 Year In Prison: The Self-Proclaimed Bitcoin Creator Faces Justice\\nBitcoin Price Prediction: BTC Breaks $100K, Is This The Year Of Crypto? New Viral Altcoin Sensation Raises $1M In Record Time\\n by Bitcoinist\\n 2 weeks ago\\nin Press releases\\n\\nDecember has been a good month for most cryptocurrencies, especially Bitcoin. Just a few days to days into December BTC price broke the most anticipated point, breaking the $100,000 mark, for the first time ever. Aside from Bitcoin asserting dominance this month, a new altcoin Yeti Ouro (YETIO) has been going viral after raising over $1 million in its presale.\\n\\nBitcoin Price News – The Journey To $100K\\n\\nFor a very long time, investors and enthusiasts have been looking forward to Bitcoin hitting the $100k mark. It all seemed like it would be achieved right after the last bitcoin halving this year but that was not the case until recently.\\n\\nOn December 3rd BTC price hit $100,000 for the first time and with the momentum still alive Bitcoins ascended past $100K to hit an all-time high of $103,900 2 days later. Despite the momentum, Bitcoin has since then faced a few setbacks dipping to $97,820.66 today. With a market cap of $1.93 trillion, the coin’s dominance remains unmatched.\\n\\nWhat Propelled BTC to $100K?\\n\\nSince the start of the year after the SEC approved bitcoin ETFs including BlackRock Bitcoin ETF, Bitcoin has seen an increased institutional adoption.  Major institutional players continue to view Bitcoin as a hedge against inflation and an alternative store of value.\\n\\nThe recent win by a pro-crypto Government has also boosted the confidence of investors\\n\\n\\nYeti Ouro: The New Viral Altcoin Raises $1M In Record Time\\n\\nEmerging as a utility-driven meme coin, Yeti Ouro has raised an impressive $1,004,241 so far in its presale phase, getting the attention of the crypto community. The project is looking to complete stage 1 of presale having completed about 84% already.\\n\\nWhat Makes Yeti Ouro Special?\\n\\nWith a capped supply of 1 billion tokens, the project is designed to appreciate. 50% of these tokens have been allocated to early investors with the current price of Yeti Ouro standing at $0.012. \\n\\nYeti Ouro is not just a token, it has integrated a Play-to-Earn (P2E) racing game built on Unreal Engine, Yeti Go. This integration offers players the chance to earn and use Yeti Ouro tokens in-game for purchases, race entry fees, and staking.\\n\\nHaving raised over $1 million in presale which launched recently, Yeti Ouro’s success reflects strong community backing and a growing belief in its potential as a 100X meme coin. Early investors have a rare chance to enjoy such RIO. \\n\\nWhile Bitcoin aims for $150K next, Yeti Ouro is looking to launch stage 2 of presale. Yeti Ouro’s strong presale performance demonstrates the appetite for fresh, and with the community growing by the day, gaining by 100x or more is a realistic target for utility-driven projects\\n\\nJoin The Yeti Ouro Community \\n\\nWebsite: https://yetiouro.io/\\n\\nX (Formally Twitter): https://x.com/yetiouro\\n\\nTelegram: https://t.me/yetiouroofficial\\n\\nDiscord: https://discord.gg/YtUsEZ2Zr\\n\\nDisclaimer: This is a paid release. The statements, views and opinions expressed in this column are solely those of the content provider and do not necessarily represent those of Bitcoinist. Bitcoinist does not guarantee the accuracy or timeliness of information available in such content. Do your research and invest at your own risk.\\n\\nSign Up for Our Newsletter!\\n\\nFor updates and exclusive offers enter your email.\\n\\n Sign Up\\n I consent to my submitted data being collected and stored.\\nBitcoinist\\n\\nBitcoinist is the ultimate news and review site for the crypto currency community!\\n\\nRelated Posts\\nBreaking Down Qubetics’ Wallet Secrets, Binance’s Licensing Strategies, and Litecoin’s Network Growth in Today’s Crypto News\\n19 hours ago\\nSolana Price Prediction: 2025 Could be The Year SOL Joins the $1000 Club, But This Must Happen First\\n2 days ago\\nWill Monsta Mash ($MASH) Outpace Tron (TRX) & Solana (SOL) in the next Bull Run?\\n3 days ago\\nDon’t Get Left Behind: New Meme Coins to Invest in for Short Term That Are Making Waves!\\n3 days ago\\nRipple (XRP): Is Another Leg Up Imminent, or Will Investors Be Left Holding Their Bags for Another 7 Years?\\n3 days ago\\nBNB (BNB) Inches Closer To $800, Sui (SUI) Makes New ATH Again—Lunex Network (LNEX) Raises Over $5 Million\\n3 days ago\\nPress Releases\\nBreaking Down Qubetics’ Wallet Secrets, Binance’s...\\n19 hours ago\\nSolana Price Prediction: 2025 Could be The Year SOL Joins...\\n2 days ago\\nWill Monsta Mash ($MASH) Outpace Tron (TRX) & Solana...\\n3 days ago\\nDon’t Get Left Behind: New Meme Coins to Invest in for...\\n3 days ago\\nRipple (XRP): Is Another Leg Up Imminent, or Will Investors...\\n3 days ago\\n\\nBitcoin news portal providing breaking news, guides, price analysis about decentralized digital money & blockchain technology.\\n\\nBITCOIN\\nNews\\nPrice\\nBusinesses\\nAcceptance\\nTechnology\\nInvestment\\nRegulation\\nReviews\\nALTCOINS\\nNews\\nPrice\\nEthereum\\nRipple\\nLitecoin\\nEOS\\nCATEGORIES\\nBlockchain\\nSecurity\\nFinTech\\nTechnology\\nTrending\\nBreaking News\\nPress Releases\\nHow to\\nABOUT US\\nAdvertise\\nContact us\\nEditorial Policy\\nPrivacy Policy\\n© 2024 Bitcoinist.com. All Rights Reserved.\\nBitcoin\\nAltcoins\\nTech\\nIndustry\\nHow to\\nEvents\\nPlay Games\\nCasinos\\nStake: 200% Bonus\\nADVERTISE\\n\\n© 2023 Bitcoinist. All Rights Reserved.\\n\\nThis website uses cookies. By continuing to use this website you are giving consent to cookies being used. Visit our Privacy Center or Cookie Policy. I Agree\"\n}",
                                "display_name": "Text",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Text to be passed as input.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "MultilineInput"
                            }
                        },
                        "description": "Get text inputs from the Playground.",
                        "icon": "type",
                        "base_classes": [
                            "Message"
                        ],
                        "display_name": "Text Input",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "text",
                                "display_name": "Text",
                                "method": "text_response",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "input_value"
                        ],
                        "beta": false,
                        "legacy": false,
                        "edited": false,
                        "metadata": {},
                        "tool_mode": false,
                        "lf_version": "1.1.0"
                    },
                    "type": "TextInput",
                    "id": "TextInput-Kf7KW"
                },
                "selected": false,
                "width": 320,
                "height": 233,
                "positionAbsolute": {
                    "x": -338.26852453127543,
                    "y": 207.385313234112
                },
                "dragging": false
            },
            {
                "id": "ParseData-yzKpN",
                "type": "genericNode",
                "position": {
                    "x": 917.7620190856803,
                    "y": 537.4201743721101
                },
                "data": {
                    "node": {
                        "template": {
                            "_type": "Component",
                            "data": {
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "list": false,
                                "trace_as_input": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "data",
                                "value": "",
                                "display_name": "Data",
                                "advanced": false,
                                "input_types": [
                                    "Data"
                                ],
                                "dynamic": false,
                                "info": "The data to convert to text.",
                                "title_case": false,
                                "type": "other",
                                "_input_type": "DataInput"
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "sep": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "sep",
                                "value": "\n",
                                "display_name": "Separator",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "StrInput"
                            },
                            "template": {
                                "tool_mode": false,
                                "trace_as_input": true,
                                "multiline": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "template",
                                "value": "## Given data\n```\n{given_data}\n```",
                                "display_name": "Template",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "MultilineInput"
                            }
                        },
                        "description": "Convert Data into plain text following a specified template.",
                        "icon": "braces",
                        "base_classes": [
                            "Message"
                        ],
                        "display_name": "Parse Data",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "text",
                                "display_name": "Text",
                                "method": "parse_data",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "data",
                            "template",
                            "sep"
                        ],
                        "beta": false,
                        "legacy": false,
                        "edited": false,
                        "metadata": {},
                        "tool_mode": false,
                        "category": "processing",
                        "key": "ParseData",
                        "lf_version": "1.1.0"
                    },
                    "type": "ParseData",
                    "id": "ParseData-yzKpN"
                },
                "selected": false,
                "width": 320,
                "height": 302,
                "positionAbsolute": {
                    "x": 917.7620190856803,
                    "y": 537.4201743721101
                },
                "dragging": false
            },
            {
                "id": "ParseJSONData-0seu2",
                "type": "genericNode",
                "position": {
                    "x": 349.2598573544815,
                    "y": 110.8853941035513
                },
                "data": {
                    "node": {
                        "template": {
                            "_type": "Component",
                            "input_value": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "name": "input_value",
                                "value": "",
                                "display_name": "Input",
                                "advanced": false,
                                "input_types": [
                                    "Message",
                                    "Data"
                                ],
                                "dynamic": false,
                                "info": "Data object to filter.",
                                "title_case": false,
                                "type": "other",
                                "_input_type": "HandleInput"
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "import json\nfrom json import JSONDecodeError\n\nimport jq\nfrom json_repair import repair_json\nfrom loguru import logger\n\nfrom langflow.custom import Component\nfrom langflow.inputs import HandleInput, MessageTextInput\nfrom langflow.io import Output\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass ParseJSONDataComponent(Component):\n    display_name = \"Parse JSON\"\n    description = \"Convert and extract JSON fields.\"\n    icon = \"braces\"\n    name = \"ParseJSONData\"\n    legacy: bool = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Input\",\n            info=\"Data object to filter.\",\n            required=True,\n            input_types=[\"Message\", \"Data\"],\n        ),\n        MessageTextInput(\n            name=\"query\",\n            display_name=\"JQ Query\",\n            info=\"JQ Query to filter the data. The input is always a JSON list.\",\n            required=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Filtered Data\", name=\"filtered_data\", method=\"filter_data\"),\n    ]\n\n    def _parse_data(self, input_value) -> str:\n        if isinstance(input_value, Message) and isinstance(input_value.text, str):\n            return input_value.text\n        if isinstance(input_value, Data):\n            return json.dumps(input_value.data)\n        return str(input_value)\n\n    def filter_data(self) -> list[Data]:\n        to_filter = self.input_value\n        if not to_filter:\n            return []\n        # Check if input is a list\n        if isinstance(to_filter, list):\n            to_filter = [self._parse_data(f) for f in to_filter]\n        else:\n            to_filter = self._parse_data(to_filter)\n\n        # If input is not a list, don't wrap it in a list\n        if not isinstance(to_filter, list):\n            to_filter = repair_json(to_filter)\n            try:\n                to_filter_as_dict = json.loads(to_filter)\n            except JSONDecodeError:\n                try:\n                    to_filter_as_dict = json.loads(repair_json(to_filter))\n                except JSONDecodeError as e:\n                    msg = f\"Invalid JSON: {e}\"\n                    raise ValueError(msg) from e\n        else:\n            to_filter = [repair_json(f) for f in to_filter]\n            to_filter_as_dict = []\n            for f in to_filter:\n                try:\n                    to_filter_as_dict.append(json.loads(f))\n                except JSONDecodeError:\n                    try:\n                        to_filter_as_dict.append(json.loads(repair_json(f)))\n                    except JSONDecodeError as e:\n                        msg = f\"Invalid JSON: {e}\"\n                        raise ValueError(msg) from e\n            to_filter = to_filter_as_dict\n\n        full_filter_str = json.dumps(to_filter_as_dict)\n\n        logger.info(\"to_filter: \", to_filter)\n\n        results = jq.compile(self.query).input_text(full_filter_str).all()\n        logger.info(\"results: \", results)\n        return [Data(data=value) if isinstance(value, dict) else Data(text=str(value)) for value in results]\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "query": {
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "name": "query",
                                "value": ".",
                                "display_name": "JQ Query",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "JQ Query to filter the data. The input is always a JSON list.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "MessageTextInput"
                            }
                        },
                        "description": "Convert and extract JSON fields.",
                        "icon": "braces",
                        "base_classes": [
                            "Data"
                        ],
                        "display_name": "Parse JSON",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Data"
                                ],
                                "selected": "Data",
                                "name": "filtered_data",
                                "display_name": "Filtered Data",
                                "method": "filter_data",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "input_value",
                            "query"
                        ],
                        "beta": false,
                        "legacy": true,
                        "edited": false,
                        "metadata": {},
                        "tool_mode": false,
                        "category": "processing",
                        "key": "ParseJSONData",
                        "lf_version": "1.1.0"
                    },
                    "type": "ParseJSONData",
                    "id": "ParseJSONData-0seu2"
                },
                "selected": false,
                "width": 320,
                "height": 282,
                "positionAbsolute": {
                    "x": 349.2598573544815,
                    "y": 110.8853941035513
                },
                "dragging": false
            },
            {
                "id": "GoogleGenerativeAIModel-UdtFp",
                "type": "genericNode",
                "position": {
                    "x": 1368.9854733326504,
                    "y": 75.78075365427628
                },
                "data": {
                    "node": {
                        "template": {
                            "_type": "Component",
                            "temperature": {
                                "min_label": "",
                                "max_label": "",
                                "min_label_icon": "",
                                "max_label_icon": "",
                                "slider_buttons": false,
                                "slider_buttons_options": [],
                                "slider_input": false,
                                "range_spec": {
                                    "step_type": "float",
                                    "min": 0,
                                    "max": 2,
                                    "step": 0.01
                                },
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "temperature",
                                "value": 0.7,
                                "display_name": "Temperature",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Controls randomness. Lower values are more deterministic, higher values are more creative.",
                                "title_case": false,
                                "type": "slider",
                                "_input_type": "SliderInput"
                            },
                            "api_key": {
                                "load_from_db": true,
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "name": "api_key",
                                "value": "",
                                "display_name": "OpenRouter API Key",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Your OpenRouter API key",
                                "title_case": false,
                                "password": true,
                                "type": "str",
                                "_input_type": "SecretStrInput"
                            },
                            "app_name": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "app_name",
                                "value": "",
                                "display_name": "App Name",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Your app name for OpenRouter rankings",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "StrInput"
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from collections import defaultdict\nfrom typing import Any\n\nimport httpx\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs.inputs import (\n    DropdownInput,\n    IntInput,\n    SecretStrInput,\n    SliderInput,\n    StrInput,\n)\n\n\nclass OpenRouterComponent(LCModelComponent):\n    \"\"\"OpenRouter API component for language models.\"\"\"\n\n    display_name = \"OpenRouter\"\n    description = (\n        \"OpenRouter provides unified access to multiple AI models from different providers through a single API.\"\n    )\n    icon = \"OpenRouter\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        SecretStrInput(\n            name=\"api_key\", display_name=\"OpenRouter API Key\", required=True, info=\"Your OpenRouter API key\"\n        ),\n        StrInput(\n            name=\"site_url\",\n            display_name=\"Site URL\",\n            info=\"Your site URL for OpenRouter rankings\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"app_name\",\n            display_name=\"App Name\",\n            info=\"Your app name for OpenRouter rankings\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"provider\",\n            display_name=\"Provider\",\n            info=\"The AI model provider\",\n            value=\"Loading providers...\",\n            real_time_refresh=True,\n            required=True,\n        ),\n        StrInput(\n            name=\"model_name\",\n            display_name=\"Model\",\n            info=\"The model to use for chat completion\",\n            value=\"Select a provider first\",\n            real_time_refresh=True,\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.7,\n            range_spec=RangeSpec(min=0, max=2, step=0.01),\n            info=\"Controls randomness. Lower values are more deterministic, higher values are more creative.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            info=\"Maximum number of tokens to generate\",\n            advanced=True,\n        ),\n    ]\n\n    def fetch_models(self) -> dict[str, list]:\n        \"\"\"Fetch available models from OpenRouter API and organize them by provider.\"\"\"\n        url = \"https://openrouter.ai/api/v1/models\"\n\n        try:\n            with httpx.Client() as client:\n                response = client.get(url)\n                response.raise_for_status()\n\n                models_data = response.json().get(\"data\", [])\n                provider_models = defaultdict(list)\n\n                for model in models_data:\n                    model_id = model.get(\"id\", \"\")\n                    if \"/\" in model_id:\n                        provider = model_id.split(\"/\")[0].title()\n                        provider_models[provider].append(\n                            {\n                                \"id\": model_id,\n                                \"name\": model.get(\"name\", \"\"),\n                                \"description\": model.get(\"description\", \"\"),\n                                \"context_length\": model.get(\"context_length\", 0),\n                            }\n                        )\n\n                return dict(provider_models)\n\n        except httpx.HTTPError as e:\n            self.log(f\"Error fetching models: {e!s}\")\n            return {\"Error\": [{\"id\": \"error\", \"name\": f\"Error fetching models: {e!s}\"}]}\n\n    def build_model(self) -> LanguageModel:\n        \"\"\"Build and return the OpenRouter language model.\"\"\"\n        model_not_selected = \"Please select a model\"\n        api_key_required = \"API key is required\"\n\n        if not self.model_name or self.model_name == \"Select a provider first\":\n            raise ValueError(model_not_selected)\n\n        if not self.api_key:\n            raise ValueError(api_key_required)\n\n        api_key = SecretStr(self.api_key).get_secret_value()\n\n        # Build base configuration\n        kwargs: dict[str, Any] = {\n            \"model\": self.model_name,\n            \"openai_api_key\": api_key,\n            \"openai_api_base\": \"https://openrouter.ai/api/v1\",\n            \"temperature\": self.temperature if self.temperature is not None else 0.7,\n        }\n\n        # Add optional parameters\n        if self.max_tokens:\n            kwargs[\"max_tokens\"] = self.max_tokens\n\n        headers = {}\n        if self.site_url:\n            headers[\"HTTP-Referer\"] = self.site_url\n        if self.app_name:\n            headers[\"X-Title\"] = self.app_name\n\n        if headers:\n            kwargs[\"default_headers\"] = headers\n\n        try:\n            return ChatOpenAI(**kwargs)\n        except (ValueError, httpx.HTTPError) as err:\n            error_msg = f\"Failed to build model: {err!s}\"\n            self.log(error_msg)\n            raise ValueError(error_msg) from err\n\n    def _get_exception_message(self, e: Exception) -> str | None:\n        \"\"\"Get a message from an OpenRouter exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str | None: The message from the exception, or None if no specific message can be extracted.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n\n            if isinstance(e, BadRequestError):\n                message = e.body.get(\"message\")\n                if message:\n                    return message\n        except ImportError:\n            pass\n        return None\n\n    def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None) -> dict:\n        \"\"\"Update build configuration based on field updates.\"\"\"\n        try:\n            if field_name is None or field_name == \"provider\":\n                provider_models = self.fetch_models()\n                build_config[\"provider\"][\"options\"] = sorted(provider_models.keys())\n                if build_config[\"provider\"][\"value\"] not in provider_models:\n                    build_config[\"provider\"][\"value\"] = build_config[\"provider\"][\"options\"][0]\n\n            if field_name == \"provider\" and field_value in self.fetch_models():\n                provider_models = self.fetch_models()\n                models = provider_models[field_value]\n\n                build_config[\"model_name\"][\"options\"] = [model[\"id\"] for model in models]\n                if models:\n                    build_config[\"model_name\"][\"value\"] = models[0][\"id\"]\n\n                tooltips = {\n                    model[\"id\"]: (f\"{model['name']}\\nContext Length: {model['context_length']}\\n{model['description']}\")\n                    for model in models\n                }\n                build_config[\"model_name\"][\"tooltips\"] = tooltips\n\n        except httpx.HTTPError as e:\n            self.log(f\"Error updating build config: {e!s}\")\n            build_config[\"provider\"][\"options\"] = [\"Error loading providers\"]\n            build_config[\"provider\"][\"value\"] = \"Error loading providers\"\n            build_config[\"model_name\"][\"options\"] = [\"Error loading models\"]\n            build_config[\"model_name\"][\"value\"] = \"Error loading models\"\n\n        return build_config\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "input_value": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "input_value",
                                "value": "",
                                "display_name": "Input",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "MessageInput"
                            },
                            "max_tokens": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "max_tokens",
                                "value": "",
                                "display_name": "Max Tokens",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Maximum number of tokens to generate",
                                "title_case": false,
                                "type": "int",
                                "_input_type": "IntInput"
                            },
                            "model_name": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "name": "model_name",
                                "value": "google/gemini-2.5-flash-lite-preview-06-17",
                                "display_name": "Model",
                                "advanced": false,
                                "dynamic": false,
                                "info": "The model to use for chat completion",
                                "real_time_refresh": true,
                                "title_case": false,
                                "type": "str",
                                "_input_type": "StrInput",
                                "options": [
                                    "google/gemini-2.5-flash-lite-preview-06-17",
                                    "google/gemini-2.5-flash",
                                    "google/gemini-2.5-pro",
                                    "google/gemini-2.5-pro-preview",
                                    "google/gemma-3n-e4b-it:free",
                                    "google/gemma-3n-e4b-it",
                                    "google/gemini-2.5-flash-preview-05-20",
                                    "google/gemini-2.5-flash-preview-05-20:thinking",
                                    "google/gemini-2.5-pro-preview-05-06",
                                    "google/gemini-2.5-flash-preview",
                                    "google/gemini-2.5-flash-preview:thinking",
                                    "google/gemini-2.5-pro-exp-03-25",
                                    "google/gemma-3-4b-it:free",
                                    "google/gemma-3-4b-it",
                                    "google/gemma-3-12b-it:free",
                                    "google/gemma-3-12b-it",
                                    "google/gemma-3-27b-it:free",
                                    "google/gemma-3-27b-it",
                                    "google/gemini-2.0-flash-lite-001",
                                    "google/gemini-2.0-flash-001",
                                    "google/gemini-2.0-flash-exp:free",
                                    "google/gemini-flash-1.5-8b",
                                    "google/gemma-2-27b-it",
                                    "google/gemma-2-9b-it:free",
                                    "google/gemma-2-9b-it",
                                    "google/gemini-flash-1.5",
                                    "google/gemini-pro-1.5"
                                ],
                                "tooltips": {
                                    "google/gemini-2.5-flash-lite-preview-06-17": "Google: Gemini 2.5 Flash Lite Preview 06-17\nContext Length: 1048576\nGemini 2.5 Flash-Lite is a lightweight reasoning model in the Gemini 2.5 family, optimized for ultra-low latency and cost efficiency. It offers improved throughput, faster token generation, and better performance across common benchmarks compared to earlier Flash models. By default, \"thinking\" (i.e. multi-pass reasoning) is disabled to prioritize speed, but developers can enable it via the [Reasoning API parameter](https://openrouter.ai/docs/use-cases/reasoning-tokens) to selectively trade off cost for intelligence. ",
                                    "google/gemini-2.5-flash": "Google: Gemini 2.5 Flash\nContext Length: 1048576\nGemini 2.5 Flash is Google's state-of-the-art workhorse model, specifically designed for advanced reasoning, coding, mathematics, and scientific tasks. It includes built-in \"thinking\" capabilities, enabling it to provide responses with greater accuracy and nuanced context handling. \n\nAdditionally, Gemini 2.5 Flash is configurable through the \"max tokens for reasoning\" parameter, as described in the documentation (https://openrouter.ai/docs/use-cases/reasoning-tokens#max-tokens-for-reasoning).",
                                    "google/gemini-2.5-pro": "Google: Gemini 2.5 Pro\nContext Length: 1048576\nGemini 2.5 Pro is Google’s state-of-the-art AI model designed for advanced reasoning, coding, mathematics, and scientific tasks. It employs “thinking” capabilities, enabling it to reason through responses with enhanced accuracy and nuanced context handling. Gemini 2.5 Pro achieves top-tier performance on multiple benchmarks, including first-place positioning on the LMArena leaderboard, reflecting superior human-preference alignment and complex problem-solving abilities.",
                                    "google/gemini-2.5-pro-preview": "Google: Gemini 2.5 Pro Preview 06-05\nContext Length: 1048576\nGemini 2.5 Pro is Google’s state-of-the-art AI model designed for advanced reasoning, coding, mathematics, and scientific tasks. It employs “thinking” capabilities, enabling it to reason through responses with enhanced accuracy and nuanced context handling. Gemini 2.5 Pro achieves top-tier performance on multiple benchmarks, including first-place positioning on the LMArena leaderboard, reflecting superior human-preference alignment and complex problem-solving abilities.\n",
                                    "google/gemma-3n-e4b-it:free": "Google: Gemma 3n 4B (free)\nContext Length: 8192\nGemma 3n E4B-it is optimized for efficient execution on mobile and low-resource devices, such as phones, laptops, and tablets. It supports multimodal inputs—including text, visual data, and audio—enabling diverse tasks such as text generation, speech recognition, translation, and image analysis. Leveraging innovations like Per-Layer Embedding (PLE) caching and the MatFormer architecture, Gemma 3n dynamically manages memory usage and computational load by selectively activating model parameters, significantly reducing runtime resource requirements.\n\nThis model supports a wide linguistic range (trained in over 140 languages) and features a flexible 32K token context window. Gemma 3n can selectively load parameters, optimizing memory and computational efficiency based on the task or device capabilities, making it well-suited for privacy-focused, offline-capable applications and on-device AI solutions. [Read more in the blog post](https://developers.googleblog.com/en/introducing-gemma-3n/)",
                                    "google/gemma-3n-e4b-it": "Google: Gemma 3n 4B\nContext Length: 32768\nGemma 3n E4B-it is optimized for efficient execution on mobile and low-resource devices, such as phones, laptops, and tablets. It supports multimodal inputs—including text, visual data, and audio—enabling diverse tasks such as text generation, speech recognition, translation, and image analysis. Leveraging innovations like Per-Layer Embedding (PLE) caching and the MatFormer architecture, Gemma 3n dynamically manages memory usage and computational load by selectively activating model parameters, significantly reducing runtime resource requirements.\n\nThis model supports a wide linguistic range (trained in over 140 languages) and features a flexible 32K token context window. Gemma 3n can selectively load parameters, optimizing memory and computational efficiency based on the task or device capabilities, making it well-suited for privacy-focused, offline-capable applications and on-device AI solutions. [Read more in the blog post](https://developers.googleblog.com/en/introducing-gemma-3n/)",
                                    "google/gemini-2.5-flash-preview-05-20": "Google: Gemini 2.5 Flash Preview 05-20\nContext Length: 1048576\nGemini 2.5 Flash May 20th Checkpoint is Google's state-of-the-art workhorse model, specifically designed for advanced reasoning, coding, mathematics, and scientific tasks. It includes built-in \"thinking\" capabilities, enabling it to provide responses with greater accuracy and nuanced context handling. \n\nNote: This model is available in two variants: thinking and non-thinking. The output pricing varies significantly depending on whether the thinking capability is active. If you select the standard variant (without the \":thinking\" suffix), the model will explicitly avoid generating thinking tokens. \n\nTo utilize the thinking capability and receive thinking tokens, you must choose the \":thinking\" variant, which will then incur the higher thinking-output pricing. \n\nAdditionally, Gemini 2.5 Flash is configurable through the \"max tokens for reasoning\" parameter, as described in the documentation (https://openrouter.ai/docs/use-cases/reasoning-tokens#max-tokens-for-reasoning).",
                                    "google/gemini-2.5-flash-preview-05-20:thinking": "Google: Gemini 2.5 Flash Preview 05-20 (thinking)\nContext Length: 1048576\nGemini 2.5 Flash May 20th Checkpoint is Google's state-of-the-art workhorse model, specifically designed for advanced reasoning, coding, mathematics, and scientific tasks. It includes built-in \"thinking\" capabilities, enabling it to provide responses with greater accuracy and nuanced context handling. \n\nNote: This model is available in two variants: thinking and non-thinking. The output pricing varies significantly depending on whether the thinking capability is active. If you select the standard variant (without the \":thinking\" suffix), the model will explicitly avoid generating thinking tokens. \n\nTo utilize the thinking capability and receive thinking tokens, you must choose the \":thinking\" variant, which will then incur the higher thinking-output pricing. \n\nAdditionally, Gemini 2.5 Flash is configurable through the \"max tokens for reasoning\" parameter, as described in the documentation (https://openrouter.ai/docs/use-cases/reasoning-tokens#max-tokens-for-reasoning).",
                                    "google/gemini-2.5-pro-preview-05-06": "Google: Gemini 2.5 Pro Preview 05-06\nContext Length: 1048576\nGemini 2.5 Pro is Google’s state-of-the-art AI model designed for advanced reasoning, coding, mathematics, and scientific tasks. It employs “thinking” capabilities, enabling it to reason through responses with enhanced accuracy and nuanced context handling. Gemini 2.5 Pro achieves top-tier performance on multiple benchmarks, including first-place positioning on the LMArena leaderboard, reflecting superior human-preference alignment and complex problem-solving abilities.",
                                    "google/gemini-2.5-flash-preview": "Google: Gemini 2.5 Flash Preview 04-17\nContext Length: 1048576\nGemini 2.5 Flash is Google's state-of-the-art workhorse model, specifically designed for advanced reasoning, coding, mathematics, and scientific tasks. It includes built-in \"thinking\" capabilities, enabling it to provide responses with greater accuracy and nuanced context handling. \n\nNote: This model is available in two variants: thinking and non-thinking. The output pricing varies significantly depending on whether the thinking capability is active. If you select the standard variant (without the \":thinking\" suffix), the model will explicitly avoid generating thinking tokens. \n\nTo utilize the thinking capability and receive thinking tokens, you must choose the \":thinking\" variant, which will then incur the higher thinking-output pricing. \n\nAdditionally, Gemini 2.5 Flash is configurable through the \"max tokens for reasoning\" parameter, as described in the documentation (https://openrouter.ai/docs/use-cases/reasoning-tokens#max-tokens-for-reasoning).",
                                    "google/gemini-2.5-flash-preview:thinking": "Google: Gemini 2.5 Flash Preview 04-17 (thinking)\nContext Length: 1048576\nGemini 2.5 Flash is Google's state-of-the-art workhorse model, specifically designed for advanced reasoning, coding, mathematics, and scientific tasks. It includes built-in \"thinking\" capabilities, enabling it to provide responses with greater accuracy and nuanced context handling. \n\nNote: This model is available in two variants: thinking and non-thinking. The output pricing varies significantly depending on whether the thinking capability is active. If you select the standard variant (without the \":thinking\" suffix), the model will explicitly avoid generating thinking tokens. \n\nTo utilize the thinking capability and receive thinking tokens, you must choose the \":thinking\" variant, which will then incur the higher thinking-output pricing. \n\nAdditionally, Gemini 2.5 Flash is configurable through the \"max tokens for reasoning\" parameter, as described in the documentation (https://openrouter.ai/docs/use-cases/reasoning-tokens#max-tokens-for-reasoning).",
                                    "google/gemini-2.5-pro-exp-03-25": "Google: Gemini 2.5 Pro Experimental\nContext Length: 1048576\nThis model has been deprecated by Google in favor of the (paid Preview model)[google/gemini-2.5-pro-preview]\n \nGemini 2.5 Pro is Google’s state-of-the-art AI model designed for advanced reasoning, coding, mathematics, and scientific tasks. It employs “thinking” capabilities, enabling it to reason through responses with enhanced accuracy and nuanced context handling. Gemini 2.5 Pro achieves top-tier performance on multiple benchmarks, including first-place positioning on the LMArena leaderboard, reflecting superior human-preference alignment and complex problem-solving abilities.",
                                    "google/gemma-3-4b-it:free": "Google: Gemma 3 4B (free)\nContext Length: 32768\nGemma 3 introduces multimodality, supporting vision-language input and text outputs. It handles context windows up to 128k tokens, understands over 140 languages, and offers improved math, reasoning, and chat capabilities, including structured outputs and function calling.",
                                    "google/gemma-3-4b-it": "Google: Gemma 3 4B\nContext Length: 131072\nGemma 3 introduces multimodality, supporting vision-language input and text outputs. It handles context windows up to 128k tokens, understands over 140 languages, and offers improved math, reasoning, and chat capabilities, including structured outputs and function calling.",
                                    "google/gemma-3-12b-it:free": "Google: Gemma 3 12B (free)\nContext Length: 96000\nGemma 3 introduces multimodality, supporting vision-language input and text outputs. It handles context windows up to 128k tokens, understands over 140 languages, and offers improved math, reasoning, and chat capabilities, including structured outputs and function calling. Gemma 3 12B is the second largest in the family of Gemma 3 models after [Gemma 3 27B](google/gemma-3-27b-it)",
                                    "google/gemma-3-12b-it": "Google: Gemma 3 12B\nContext Length: 131072\nGemma 3 introduces multimodality, supporting vision-language input and text outputs. It handles context windows up to 128k tokens, understands over 140 languages, and offers improved math, reasoning, and chat capabilities, including structured outputs and function calling. Gemma 3 12B is the second largest in the family of Gemma 3 models after [Gemma 3 27B](google/gemma-3-27b-it)",
                                    "google/gemma-3-27b-it:free": "Google: Gemma 3 27B (free)\nContext Length: 96000\nGemma 3 introduces multimodality, supporting vision-language input and text outputs. It handles context windows up to 128k tokens, understands over 140 languages, and offers improved math, reasoning, and chat capabilities, including structured outputs and function calling. Gemma 3 27B is Google's latest open source model, successor to [Gemma 2](google/gemma-2-27b-it)",
                                    "google/gemma-3-27b-it": "Google: Gemma 3 27B\nContext Length: 131072\nGemma 3 introduces multimodality, supporting vision-language input and text outputs. It handles context windows up to 128k tokens, understands over 140 languages, and offers improved math, reasoning, and chat capabilities, including structured outputs and function calling. Gemma 3 27B is Google's latest open source model, successor to [Gemma 2](google/gemma-2-27b-it)",
                                    "google/gemini-2.0-flash-lite-001": "Google: Gemini 2.0 Flash Lite\nContext Length: 1048576\nGemini 2.0 Flash Lite offers a significantly faster time to first token (TTFT) compared to [Gemini Flash 1.5](/google/gemini-flash-1.5), while maintaining quality on par with larger models like [Gemini Pro 1.5](/google/gemini-pro-1.5), all at extremely economical token prices.",
                                    "google/gemini-2.0-flash-001": "Google: Gemini 2.0 Flash\nContext Length: 1048576\nGemini Flash 2.0 offers a significantly faster time to first token (TTFT) compared to [Gemini Flash 1.5](/google/gemini-flash-1.5), while maintaining quality on par with larger models like [Gemini Pro 1.5](/google/gemini-pro-1.5). It introduces notable enhancements in multimodal understanding, coding capabilities, complex instruction following, and function calling. These advancements come together to deliver more seamless and robust agentic experiences.",
                                    "google/gemini-2.0-flash-exp:free": "Google: Gemini 2.0 Flash Experimental (free)\nContext Length: 1048576\nGemini Flash 2.0 offers a significantly faster time to first token (TTFT) compared to [Gemini Flash 1.5](/google/gemini-flash-1.5), while maintaining quality on par with larger models like [Gemini Pro 1.5](/google/gemini-pro-1.5). It introduces notable enhancements in multimodal understanding, coding capabilities, complex instruction following, and function calling. These advancements come together to deliver more seamless and robust agentic experiences.",
                                    "google/gemini-flash-1.5-8b": "Google: Gemini 1.5 Flash 8B\nContext Length: 1000000\nGemini Flash 1.5 8B is optimized for speed and efficiency, offering enhanced performance in small prompt tasks like chat, transcription, and translation. With reduced latency, it is highly effective for real-time and large-scale operations. This model focuses on cost-effective solutions while maintaining high-quality results.\n\n[Click here to learn more about this model](https://developers.googleblog.com/en/gemini-15-flash-8b-is-now-generally-available-for-use/).\n\nUsage of Gemini is subject to Google's [Gemini Terms of Use](https://ai.google.dev/terms).",
                                    "google/gemma-2-27b-it": "Google: Gemma 2 27B\nContext Length: 8192\nGemma 2 27B by Google is an open model built from the same research and technology used to create the [Gemini models](/models?q=gemini).\n\nGemma models are well-suited for a variety of text generation tasks, including question answering, summarization, and reasoning.\n\nSee the [launch announcement](https://blog.google/technology/developers/google-gemma-2/) for more details. Usage of Gemma is subject to Google's [Gemma Terms of Use](https://ai.google.dev/gemma/terms).",
                                    "google/gemma-2-9b-it:free": "Google: Gemma 2 9B (free)\nContext Length: 8192\nGemma 2 9B by Google is an advanced, open-source language model that sets a new standard for efficiency and performance in its size class.\n\nDesigned for a wide variety of tasks, it empowers developers and researchers to build innovative applications, while maintaining accessibility, safety, and cost-effectiveness.\n\nSee the [launch announcement](https://blog.google/technology/developers/google-gemma-2/) for more details. Usage of Gemma is subject to Google's [Gemma Terms of Use](https://ai.google.dev/gemma/terms).",
                                    "google/gemma-2-9b-it": "Google: Gemma 2 9B\nContext Length: 8192\nGemma 2 9B by Google is an advanced, open-source language model that sets a new standard for efficiency and performance in its size class.\n\nDesigned for a wide variety of tasks, it empowers developers and researchers to build innovative applications, while maintaining accessibility, safety, and cost-effectiveness.\n\nSee the [launch announcement](https://blog.google/technology/developers/google-gemma-2/) for more details. Usage of Gemma is subject to Google's [Gemma Terms of Use](https://ai.google.dev/gemma/terms).",
                                    "google/gemini-flash-1.5": "Google: Gemini 1.5 Flash \nContext Length: 1000000\nGemini 1.5 Flash is a foundation model that performs well at a variety of multimodal tasks such as visual understanding, classification, summarization, and creating content from image, audio and video. It's adept at processing visual and text inputs such as photographs, documents, infographics, and screenshots.\n\nGemini 1.5 Flash is designed for high-volume, high-frequency tasks where cost and latency matter. On most common tasks, Flash achieves comparable quality to other Gemini Pro models at a significantly reduced cost. Flash is well-suited for applications like chat assistants and on-demand content generation where speed and scale matter.\n\nUsage of Gemini is subject to Google's [Gemini Terms of Use](https://ai.google.dev/terms).\n\n#multimodal",
                                    "google/gemini-pro-1.5": "Google: Gemini 1.5 Pro\nContext Length: 2000000\nGoogle's latest multimodal model, supports image and video[0] in text or chat prompts.\n\nOptimized for language tasks including:\n\n- Code generation\n- Text generation\n- Text editing\n- Problem solving\n- Recommendations\n- Information extraction\n- Data extraction or generation\n- AI agents\n\nUsage of Gemini is subject to Google's [Gemini Terms of Use](https://ai.google.dev/terms).\n\n* [0]: Video input is not available through OpenRouter at this time."
                                }
                            },
                            "provider": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "name": "provider",
                                "value": "Google",
                                "display_name": "Provider",
                                "advanced": false,
                                "dynamic": false,
                                "info": "The AI model provider",
                                "real_time_refresh": true,
                                "title_case": false,
                                "type": "str",
                                "_input_type": "StrInput",
                                "options": [
                                    "01-Ai",
                                    "Aetherwiing",
                                    "Agentica-Org",
                                    "Ai21",
                                    "Aion-Labs",
                                    "Alfredpros",
                                    "Alpindale",
                                    "Amazon",
                                    "Anthracite-Org",
                                    "Anthropic",
                                    "Arcee-Ai",
                                    "Arliai",
                                    "Baidu",
                                    "Cognitivecomputations",
                                    "Cohere",
                                    "Deepseek",
                                    "Eleutherai",
                                    "Eva-Unit-01",
                                    "Featherless",
                                    "Google",
                                    "Gryphe",
                                    "Inception",
                                    "Infermatic",
                                    "Inflection",
                                    "Liquid",
                                    "Mancer",
                                    "Meta-Llama",
                                    "Microsoft",
                                    "Minimax",
                                    "Mistralai",
                                    "Moonshotai",
                                    "Morph",
                                    "Neversleep",
                                    "Nothingiisreal",
                                    "Nousresearch",
                                    "Nvidia",
                                    "Openai",
                                    "Opengvlab",
                                    "Openrouter",
                                    "Perplexity",
                                    "Pygmalionai",
                                    "Qwen",
                                    "Raifle",
                                    "Rekaai",
                                    "Sao10K",
                                    "Sarvamai",
                                    "Scb10X",
                                    "Shisa-Ai",
                                    "Sophosympatheia",
                                    "Tencent",
                                    "Thedrummer",
                                    "Thudm",
                                    "Tngtech",
                                    "Undi95",
                                    "X-Ai"
                                ]
                            },
                            "site_url": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "site_url",
                                "value": "",
                                "display_name": "Site URL",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Your site URL for OpenRouter rankings",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "StrInput"
                            },
                            "stream": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "stream",
                                "value": false,
                                "display_name": "Stream",
                                "advanced": false,
                                "dynamic": false,
                                "info": "Stream the response from the model. Streaming works only in Chat.",
                                "title_case": false,
                                "type": "bool",
                                "_input_type": "BoolInput"
                            },
                            "system_message": {
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "system_message",
                                "value": "",
                                "display_name": "System Message",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "System message to pass to the model.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "MessageTextInput"
                            }
                        },
                        "description": "OpenRouter provides unified access to multiple AI models from different providers through a single API.",
                        "icon": "OpenRouter",
                        "base_classes": [
                            "LanguageModel",
                            "Message"
                        ],
                        "display_name": "Google Generative AI",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "text_output",
                                "hidden": null,
                                "display_name": "Text",
                                "method": "text_response",
                                "value": "__UNDEFINED__",
                                "cache": true,
                                "required_inputs": []
                            },
                            {
                                "types": [
                                    "LanguageModel"
                                ],
                                "selected": "LanguageModel",
                                "name": "model_output",
                                "hidden": null,
                                "display_name": "Language Model",
                                "method": "build_model",
                                "value": "__UNDEFINED__",
                                "cache": true,
                                "required_inputs": [
                                    "api_key",
                                    "model_name"
                                ]
                            }
                        ],
                        "field_order": [
                            "input_value",
                            "system_message",
                            "stream",
                            "api_key",
                            "site_url",
                            "app_name",
                            "provider",
                            "model_name",
                            "temperature",
                            "max_tokens"
                        ],
                        "beta": false,
                        "legacy": false,
                        "edited": true,
                        "metadata": {},
                        "tool_mode": false,
                        "lf_version": "1.1.0"
                    },
                    "type": "OpenRouterComponent",
                    "id": "GoogleGenerativeAIModel-UdtFp"
                },
                "selected": false,
                "width": 320,
                "height": 713,
                "positionAbsolute": {
                    "x": 1368.9854733326504,
                    "y": 75.78075365427628
                },
                "dragging": false
            },
            {
                "id": "TextOutput-h3Nxt",
                "type": "genericNode",
                "position": {
                    "x": 1833.45143973218,
                    "y": 360.50353471429383
                },
                "data": {
                    "node": {
                        "template": {
                            "_type": "Component",
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextOutputComponent(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n    name = \"TextOutput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as output.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        self.status = self.input_value\n        return message\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "input_value": {
                                "tool_mode": false,
                                "trace_as_input": true,
                                "multiline": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "input_value",
                                "value": "",
                                "display_name": "Text",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Text to be passed as output.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "MultilineInput"
                            }
                        },
                        "description": "Display a text output in the Playground.",
                        "icon": "type",
                        "base_classes": [
                            "Message"
                        ],
                        "display_name": "Text Output",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "text",
                                "display_name": "Text",
                                "method": "text_response",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "input_value"
                        ],
                        "beta": false,
                        "legacy": false,
                        "edited": false,
                        "metadata": {},
                        "tool_mode": false,
                        "lf_version": "1.1.0"
                    },
                    "type": "TextOutput",
                    "id": "TextOutput-h3Nxt"
                },
                "selected": false,
                "width": 320,
                "height": 233,
                "positionAbsolute": {
                    "x": 1833.45143973218,
                    "y": 360.50353471429383
                },
                "dragging": false
            },
            {
                "id": "ParseData-OvQIJ",
                "type": "genericNode",
                "position": {
                    "x": 905.4203397817423,
                    "y": 148.3166491172003
                },
                "data": {
                    "node": {
                        "template": {
                            "_type": "Component",
                            "data": {
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "list": false,
                                "trace_as_input": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "data",
                                "value": "",
                                "display_name": "Data",
                                "advanced": false,
                                "input_types": [
                                    "Data"
                                ],
                                "dynamic": false,
                                "info": "The data to convert to text.",
                                "title_case": false,
                                "type": "other",
                                "_input_type": "DataInput"
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "sep": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "sep",
                                "value": "\n",
                                "display_name": "Separator",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "StrInput"
                            },
                            "template": {
                                "tool_mode": false,
                                "trace_as_input": true,
                                "multiline": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "template",
                                "value": "Base on columns information, process given data and return response must follow rules:\n- No explanation\n- Response must in JSON format\n- Response must and only have key name in columns information\n- Response is a columns data for a table data (pandas)\n- Response format example:\n{{\n\"column name 1\": data processed,\n...\n}}\n\n## Columns information\n```\n{columns_information}\n```",
                                "display_name": "Template",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "MultilineInput"
                            }
                        },
                        "description": "Convert Data into plain text following a specified template.",
                        "icon": "braces",
                        "base_classes": [
                            "Message"
                        ],
                        "display_name": "Parse Data",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "text",
                                "display_name": "Text",
                                "method": "parse_data",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "data",
                            "template",
                            "sep"
                        ],
                        "beta": false,
                        "legacy": false,
                        "edited": false,
                        "metadata": {},
                        "tool_mode": false,
                        "category": "processing",
                        "key": "ParseData",
                        "lf_version": "1.1.0"
                    },
                    "type": "ParseData",
                    "id": "ParseData-OvQIJ"
                },
                "selected": false,
                "width": 320,
                "height": 302,
                "positionAbsolute": {
                    "x": 905.4203397817423,
                    "y": 148.3166491172003
                },
                "dragging": false
            }
        ],
        "edges": [
            {
                "source": "ParseJSONData-0seu2",
                "sourceHandle": "{œdataTypeœ:œParseJSONDataœ,œidœ:œParseJSONData-0seu2œ,œnameœ:œfiltered_dataœ,œoutput_typesœ:[œDataœ]}",
                "target": "ParseData-yzKpN",
                "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-yzKpNœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "data",
                        "id": "ParseData-yzKpN",
                        "inputTypes": [
                            "Data"
                        ],
                        "type": "other"
                    },
                    "sourceHandle": {
                        "dataType": "ParseJSONData",
                        "id": "ParseJSONData-0seu2",
                        "name": "filtered_data",
                        "output_types": [
                            "Data"
                        ]
                    }
                },
                "id": "reactflow__edge-ParseJSONData-0seu2{œdataTypeœ:œParseJSONDataœ,œidœ:œParseJSONData-0seu2œ,œnameœ:œfiltered_dataœ,œoutput_typesœ:[œDataœ]}-ParseData-yzKpN{œfieldNameœ:œdataœ,œidœ:œParseData-yzKpNœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                "animated": false,
                "className": ""
            },
            {
                "source": "ParseData-yzKpN",
                "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-yzKpNœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
                "target": "GoogleGenerativeAIModel-UdtFp",
                "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œGoogleGenerativeAIModel-UdtFpœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "input_value",
                        "id": "GoogleGenerativeAIModel-UdtFp",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    },
                    "sourceHandle": {
                        "dataType": "ParseData",
                        "id": "ParseData-yzKpN",
                        "name": "text",
                        "output_types": [
                            "Message"
                        ]
                    }
                },
                "id": "reactflow__edge-ParseData-yzKpN{œdataTypeœ:œParseDataœ,œidœ:œParseData-yzKpNœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-GoogleGenerativeAIModel-UdtFp{œfieldNameœ:œinput_valueœ,œidœ:œGoogleGenerativeAIModel-UdtFpœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "animated": false,
                "className": ""
            },
            {
                "source": "TextInput-Kf7KW",
                "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-Kf7KWœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
                "target": "ParseJSONData-0seu2",
                "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œParseJSONData-0seu2œ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œotherœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "input_value",
                        "id": "ParseJSONData-0seu2",
                        "inputTypes": [
                            "Message",
                            "Data"
                        ],
                        "type": "other"
                    },
                    "sourceHandle": {
                        "dataType": "TextInput",
                        "id": "TextInput-Kf7KW",
                        "name": "text",
                        "output_types": [
                            "Message"
                        ]
                    }
                },
                "id": "reactflow__edge-TextInput-Kf7KW{œdataTypeœ:œTextInputœ,œidœ:œTextInput-Kf7KWœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-ParseJSONData-0seu2{œfieldNameœ:œinput_valueœ,œidœ:œParseJSONData-0seu2œ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œotherœ}",
                "animated": false,
                "className": ""
            },
            {
                "source": "GoogleGenerativeAIModel-UdtFp",
                "sourceHandle": "{œdataTypeœ:œOpenRouterComponentœ,œidœ:œGoogleGenerativeAIModel-UdtFpœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
                "target": "TextOutput-h3Nxt",
                "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-h3Nxtœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "input_value",
                        "id": "TextOutput-h3Nxt",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    },
                    "sourceHandle": {
                        "dataType": "OpenRouterComponent",
                        "id": "GoogleGenerativeAIModel-UdtFp",
                        "name": "text_output",
                        "output_types": [
                            "Message"
                        ]
                    }
                },
                "id": "reactflow__edge-GoogleGenerativeAIModel-UdtFp{œdataTypeœ:œOpenRouterComponentœ,œidœ:œGoogleGenerativeAIModel-UdtFpœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-TextOutput-h3Nxt{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-h3Nxtœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "animated": false,
                "className": ""
            },
            {
                "source": "ParseData-OvQIJ",
                "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-OvQIJœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
                "target": "GoogleGenerativeAIModel-UdtFp",
                "targetHandle": "{œfieldNameœ:œsystem_messageœ,œidœ:œGoogleGenerativeAIModel-UdtFpœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "system_message",
                        "id": "GoogleGenerativeAIModel-UdtFp",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    },
                    "sourceHandle": {
                        "dataType": "ParseData",
                        "id": "ParseData-OvQIJ",
                        "name": "text",
                        "output_types": [
                            "Message"
                        ]
                    }
                },
                "id": "reactflow__edge-ParseData-OvQIJ{œdataTypeœ:œParseDataœ,œidœ:œParseData-OvQIJœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-GoogleGenerativeAIModel-UdtFp{œfieldNameœ:œsystem_messageœ,œidœ:œGoogleGenerativeAIModel-UdtFpœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "animated": false,
                "className": ""
            },
            {
                "source": "ParseJSONData-0seu2",
                "sourceHandle": "{œdataTypeœ:œParseJSONDataœ,œidœ:œParseJSONData-0seu2œ,œnameœ:œfiltered_dataœ,œoutput_typesœ:[œDataœ]}",
                "target": "ParseData-OvQIJ",
                "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-OvQIJœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "data",
                        "id": "ParseData-OvQIJ",
                        "inputTypes": [
                            "Data"
                        ],
                        "type": "other"
                    },
                    "sourceHandle": {
                        "dataType": "ParseJSONData",
                        "id": "ParseJSONData-0seu2",
                        "name": "filtered_data",
                        "output_types": [
                            "Data"
                        ]
                    }
                },
                "id": "reactflow__edge-ParseJSONData-0seu2{œdataTypeœ:œParseJSONDataœ,œidœ:œParseJSONData-0seu2œ,œnameœ:œfiltered_dataœ,œoutput_typesœ:[œDataœ]}-ParseData-OvQIJ{œfieldNameœ:œdataœ,œidœ:œParseData-OvQIJœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                "animated": false,
                "className": ""
            }
        ],
        "viewport": {
            "x": -196.0713014435584,
            "y": 37.72595336047266,
            "zoom": 0.5829941868791592
        }
    },
    "description": "Empowering Enterprises with Intelligent Interactions.",
    "name": "SparkLLM (1)",
    "last_tested_version": "1.1.0",
    "endpoint_name": null,
    "is_component": false
}